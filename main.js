(()=>{"use strict";const t=(t,e)=>s=>{s.target.closest(t)&&e(s)};class e{#t;#e;#s;constructor(t){this.#t=new Date,this.#e=t.answer,this.#s=t.right,Object.freeze(this)}get(t){return this[t]}}new class{#n;constructor(){this.title=document.querySelector(".main-header__title"),this.main=document.querySelector(".main-content"),this.state={content:"",title:""},this.#n=[],fetch("api/data.json").then((t=>t.json())).then((t=>{this.data=t,this.init()})),document.addEventListener("click",t(".subject-selection button",(t=>{const e=t.target.closest(".subject-selection button");this.startQuiz(e.value)}))),document.addEventListener("click",t('[data-quizz="replay"]',(t=>{this.init()}))),document.addEventListener("submit",t("#answer",(t=>{if(t.preventDefault(),t.submitter.matches('[data-quizz="next"]'))return this.state.step++,void(this.state.step<this.quiz.questions.length?this.renderQuestion():this.renderResult());this.validateForm(t.target.closest("form"))})))}init(){const t=this.data.quizzes.reduce(((t,e)=>`${t}\n                <li>\n                    <button class="button" value="${e.title}">\n                        <figure class="button__icon"><img src="${e.icon}"></figure>\n                        ${e.title}\n                    </button>\n                </li>\n            `),"");this.state.content=`\n            <h2 class="welcome-title">Welcome to the <strong>Frontend Quiz!</strong></h2>\n            <h3 class="meta-title">Pick a subject to get started.</h3>\n            <ul class="subject-selection">${t}</ul>`,this.render()}render(){this.title.innerHTML=this.state.title,this.main.innerHTML=this.state.content}startQuiz(t){this.quiz=this.data.quizzes.find((e=>e.title===t)),this.state.title=this.quiz.title,this.state.step=0,this.renderQuestion()}renderQuestion(t=this.state.step){const e=this.quiz.questions[t],s=e.options.reduce(((t,e,s)=>{const n=this._escapeHTML(e);return`${t}\n                <label>\n                    <input type="radio" name="answer" value="${n}">\n                    <span class="button">\n                        <span class="button__icon">${String.fromCharCode(97+s).toUpperCase()}</span>${n}\n                    </span>\n                </label>\n            `}),"");this.state.content=`\n            <h2 class="meta-title">Question\n                ${t+1}\n                of ${this.quiz.questions.length}\n            </h2>\n            <p class="question">${e.question}</p>\n            <label><span class="invisible">Progress: </span>\n                <progress value="${t+1}" max="${this.quiz.questions.length}"></progress>\n            </label>\n\n            <form id="answer">\n                <fieldset>${s}\n                    <button class="button button--submit" data-quizz="submit">Submit Answer</button>\n                    <p class="error"></p>\n                </fieldset>\n                <button class="button button--submit" data-quizz="next">Next</button>\n            </form>\n            `,this.render()}renderResult(){const t=this.#n.reduce(((t,e)=>t+e.right===!0?1:0),0),e=this.quiz.questions.length;this.state.content=`\n            <h1 class="welcome-title">Quiz completed <strong>You scored...</strong></h1>\n\n            <div class="score-tile">\n                <h2 class="icon-title">\n                    <figure class="score-tile__title-icon">\n                        <img src="../assets/images/icon-accessibility.svg" alt="">\n                    </figure>\n                    Accessibility\n                </h2>\n                <div class="score-tile__score">${t}</div>\n                <span class="score-tile__meta"> out of ${e}</span>\n            </div>\n            <button class="button button--submit" data-quizz="replay">Play Again</button>\n        `,this.render()}validateForm(t){const s=new FormData(t).get("answer");if(!s)return void(t.querySelector(".error").innerHTML="Please select an answer");t.querySelector(".error").innerHTML="";const n=this.quiz.questions[this.state.step];t.querySelector("fieldset").setAttribute("disabled","");const i=t.querySelector('[name="answer"]:checked').nextElementSibling;s===n.answer?i.classList.add("button--valid"):(i.classList.add("button--error"),t.querySelector(`[type="radio"][value="${n.answer}"]`).nextElementSibling.classList.add("button--valid")),this.#n[this.state.step]=new e({answer:s,right:s===n.answer})}_escapeHTML(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}}})();